// Register ecological domain types
register type Tree, Soil, Water, Sunlight, GrowthStage

class Tree {
    var name: str
    var stage: GrowthStage = GrowthStage.Seed

    var soilQuality: int = use.state(70)
    var waterLevel: int = use.state(50)
    var sunlight: int = use.state(80)
    var infectionLevel: int = use.state(0)

    fun init(name: str) {
        self.name = name
    }

    // Unified rules block with per-variable logic and mandatory fallbacks
    rules {
        soilQuality {
            when soilQuality < 40 { }
            use.fallback(fun() {
                print("🌿 Soil mutation blocked for {self.name}")
            })
        }

        waterLevel {
            when waterLevel < 30 { }
            when waterLevel > 100 { }
            use.fallback(fun() {
                print("💧 Water mutation blocked for {self.name}")
            })
        }

        stage {
            when soilQuality < 40 or waterLevel < 30 { }
            use.fallback(fun() {
                print("❌ Growth blocked for {self.name}")
            })
        }

        sunlight {
            use.effect([soilQuality, waterLevel], fun() {
                print("🌞 Sunlight changed. Soil: {soilQuality}, Water: {waterLevel}")
            })
            use.fallback(fun() {
                print("⚠️ Sunlight effect failed for {self.name}")
            })
        }
    }

    // Decay logic applied per tick
    fun tick() {
        use.setState(sunlight, sunlight - 1)
        use.setState(waterLevel, waterLevel - 2)
    }

    // Tree interactions
    fun hydrate() {
        use.setState(waterLevel, waterLevel + 20)
    }

    fun photosynthesize() {
        use.setState(sunlight, sunlight + 15)
    }

    fun fertilize() {
        use.setState(soilQuality, soilQuality + 10)
    }

    // Growth progression with rule validation
    fun growSafely() {
        use.setState(stage, stage.next())
    }

    // Immune response simulation
    fun combatInfection() {
        print("🦠 {self.name} is fighting infection...")

        let healthScore: int = soilQuality + waterLevel + sunlight
        let chance: int = (healthScore / 3) + random.int(1, 10)

        if chance > 40 {
            use.setState(infectionLevel, 0)
            print("💪 {self.name} resisted the infection!")
        } else {
            use.setState(infectionLevel, infectionLevel + 5)
            print("💀 Infection worsened. Level: {infectionLevel}")
        }
    }

    fun describe() {
        print("🌱 {self.name} is at stage: {stage}")
    }
}

// Main program
fun main() {
    let mangoTree: Tree = Tree("Mango")
    mangoTree.describe()

    mangoTree.hydrate()
    mangoTree.photosynthesize()
    mangoTree.fertilize()

    mangoTree.growSafely()
    mangoTree.describe()

    mangoTree.combatInfection()
}
